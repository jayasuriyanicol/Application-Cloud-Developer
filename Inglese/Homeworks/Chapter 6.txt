
CAPITOLO 6: 


You’ve built and tested your solution, but the work isn’t over yet.  
Before finishing, you must evaluate its quality.  
Key aspects include correctness, efficiency, elegance, and usability.  
Does it truly solve the problem? Is it resource-efficient?  
Is it simple yet effective? Does it meet user needs?  
This chapter guides you in assessing these factors.


Is It Correct?

The most crucial question is whether the solution truly solves the original problem.
If it’s incorrect, other quality factors don’t matter—it must be fixed.
A skeptical approach assumes a program is incorrect until proven otherwise.
Correctness in theory involves formal proofs, but in practice, testing is key.
Testing verifies the solution meets its initial specification and behaves as expected.
Empirical validation through structured test plans ensures correctness.




Unlike mathematical proofs, empirical testing aims to find errors, not prove correctness.
A single failed test can disprove correctness, but passing tests only add supporting evidence.
Since testing every possible input is infeasible, correctness is measured in degrees.
More passed tests strengthen confidence but don’t provide absolute certainty.

Correctness can be graded across levels:

No syntax errors or invalid operations.
Correct results for some test cases.
Correct results for typical or random cases.
Correct results for difficult test cases.
Correct results for all valid inputs in the problem’s scope.
Also handles erroneous inputs reasonably.
Correct or reasonable responses for all possible inputs.


Reducing failing tests doesn’t prove correctness—one failure is enough to disprove it.  

- No tests run = no evidence of correctness.  
- Some passing, no failing = some evidence of correctness.  
- Some passing, at least one failing = incorrect solution.  

Correctness only means the solution works; efficiency, simplicity, or preference don’t matter.


UNTIL 6.1 PAGE 4 (READ AGAIN AND GO OVER)
Is It Efficient? 

Every algorithm consumes resources—mainly time and space.  
- **Time**: The number of steps it takes to complete.  
- **Space**: The memory required to execute.  

Efficiency depends on acceptable resource usage, but comparison is tricky.  
Computer science solves this with **complexity classes**, grouping algorithms by behavior.  
These classes help predict performance as input size grows.  
Efficiency is judged by worst-case resource usage based on input size.


In **Table 6.1**, running time is expressed using **Big-O notation**, which describes the time complexity of algorithms.  

- **N** represents the number of items in the input.  
- **O(N)** means the algorithm takes **N** time units to process **N** items, indicating a linear relationship.  
- **O(N²)** means the algorithm takes **N²** time units, which grows quadratically with the number of items.  

These classes help quantify how an algorithm’s performance scales with input size, with **Big-O** providing a shorthand for expected growth rates.


### **Example: Linear Search**

The **linear search** algorithm checks if a search item is in a list by comparing it with each item sequentially.

- **Best case**: The search item matches the first item in the list, making the time complexity **O(1)** (constant time).
- **Average case**: Assuming equal likelihood of finding the item anywhere in the list, the search item will be in the middle, giving an average complexity of **O(N)**.
- **Worst case**: The search item is either at the end of the list or not found, resulting in a time complexity of **O(N)**.

With a worst-case performance of **O(N)**, users can assess whether this algorithm is efficient enough based on their input size.

Algorithms with **O(log N), O(N), and O(N²)** are considered efficient, while those with **O(2^N), O(N^N), or O(N!)** are inefficient, as their performance degrades quickly as N grows.


Is It Elegant?
While correctness and efficiency are objective measures, elegance introduces subjectivity, often associated with art but also relevant in functional fields like engineering and mathematics.

Elegance in software maximizes both effectiveness and simplicity, providing a solution that is both useful and minimal.
For example, in engineering, a trap under a sink solves the problem of foul odors with a simple, automatic solution that requires little maintenance.

In science, elegance can be seen in theories like Newton’s second law (F=ma) or Einstein's equation (E=mc²), which explain complex phenomena with simple formulas.
In mathematics, an elegant proof is one that provides a simple, effective solution to a complex problem, as demonstrated by the story of Carl Friedrich Gauss.



Example of Elegance in Mathematics: Gauss’ Approach
When tasked with calculating the sum of integers from 1 to 100, most students added numbers sequentially (1+2=3, 3+3=6, etc.).
However, Carl Friedrich Gauss noticed a pattern: pairs of numbers like 1+100, 2+99, 3+98, and so on, each sum equaled 101.
This allowed him to group the 100 numbers into 50 pairs, each summing to 101.
Instead of 100 sums, Gauss simply multiplied 50 × 101 to find the total, demonstrating an elegant, simple solution to a seemingly complex problem.









